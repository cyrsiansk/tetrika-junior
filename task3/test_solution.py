import pytest
from solution import appearance


@pytest.mark.parametrize("intervals,expected", [
    ({
         'lesson': [1594663200, 1594666800],
         'pupil': [1594663340, 1594663389, 1594663390, 1594663395, 1594663396, 1594666472],
         'tutor': [1594663290, 1594663430, 1594663443, 1594666473]
     }, 3117),
    ({
         'lesson': [1594702800, 1594706400],
         'pupil': [1594702789, 1594704500, 1594702807, 1594704542, 1594704512, 1594704513,
                   1594704564, 1594705150, 1594704581, 1594704582, 1594704734, 1594705009,
                   1594705095, 1594705096, 1594705106, 1594706480, 1594705158, 1594705773,
                   1594705849, 1594706480, 1594706500, 1594706875, 1594706502, 1594706503,
                   1594706524, 1594706524, 1594706579, 1594706641],
         'tutor': [1594700035, 1594700364, 1594702749, 1594705148, 1594705149, 1594706463]
     }, 3577),
    ({
         'lesson': [1594692000, 1594695600],
         'pupil': [1594692033, 1594696347],
         'tutor': [1594692017, 1594692066, 1594692068, 1594696341]
     }, 3565),

    # Никто не пересекается
    ({
         'lesson': [100, 200],
         'pupil': [300, 400],
         'tutor': [500, 600]
     }, 0),

    # Все идеально совпадают
    ({
         'lesson': [0, 100],
         'pupil': [0, 100],
         'tutor': [0, 100]
     }, 100),

    # Частичное совпадение всех троих
    ({
         'lesson': [0, 100],
         'pupil': [0, 50],
         'tutor': [25, 75]
     }, 25),

    # Вход и выход в одно и то же время
    ({
         'lesson': [0, 100],
         'pupil': [10, 10],
         'tutor': [0, 100]
     }, 0),

    # Полностью пустые интервалы
    ({
         'lesson': [],
         'pupil': [],
         'tutor': []
     }, 0),

    # Вход одного участника сразу после выхода другого
    ({
         'lesson': [0, 10],
         'pupil': [0, 5],
         'tutor': [5, 10]
     }, 0)
])
def test_appearance(intervals, expected):
    assert appearance(intervals) == expected


@pytest.mark.parametrize("intervals", [
    # Нечётное количество timestamps
    {'lesson': [0, 100], 'pupil': [0, 10, 20], 'tutor': [0, 100]},

    # Неверный тип данных
    {'lesson': "not a list", 'pupil': [0, 10], 'tutor': [0, 100]},
])
def test_appearance_raises(intervals):
    with pytest.raises(Exception):
        appearance(intervals)
